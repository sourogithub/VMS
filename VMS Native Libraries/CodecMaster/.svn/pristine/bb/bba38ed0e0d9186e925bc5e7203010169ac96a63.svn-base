/* DO NOT EDIT THIS FILE - it is machine generated */
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
using namespace std;
#include "CodecMaster.h"
/* Header for class com_dss_vms_jni_interfaces_CodecMaster */
#include "com_dss_vms_jni_interfaces_CodecMaster.h"


/*
 * Class:     com_dss_vms_jni_interfaces_CodecMaster
 * Method:    _tearDown
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_dss_vms_jni_interfaces_CodecMaster__1tearDown
(JNIEnv *env, jobject jobject)
{
	printf("I am teardown in jni\n");
	ErrorTypes eT = DSS_SUCCESS;

	if ( DSS_SUCCESS != (eT = TearDown()) )
	{
		//TO DO: Handle the error

		return (UINT32)DSS_ERROR;
	}

	return (UINT32)eT;
}

/*
 * Class:     com_dss_vms_jni_interfaces_CodecMaster
 * Method:    _initialize
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_dss_vms_jni_interfaces_CodecMaster__1initialize
(JNIEnv *env, jobject jobject)
{
	printf("I am inside Java_com_dss_vms_jni_interfaces_CodecMaster__1initialize\n");

	ErrorTypes eT  = Initialize();

	if ( DSS_SUCCESS != eT )
	{
		//TO DO: Handle the error
		printf("Sad\n");
		return (UINT32)DSS_ERROR;
	}

	return (UINT32)(eT);
}

/*
 * Class:     com_dss_vms_jni_interfaces_CodecMaster
 * Method:    _addDecoder
 * Signature: (Ljava/nio/ByteBuffer;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_dss_vms_jni_interfaces_CodecMaster__1addDecorder
(JNIEnv *env, jobject obj, jobject jmappingBuffer, jbyte jmediaType, jbyte jcolorSpace)
{
	UINT8 *mappingBuffer =  reinterpret_cast<UINT8 *>((env)->GetDirectBufferAddress(jmappingBuffer));

	INT32 bufferSize = *((INT32 *)mappingBuffer);

	printf("Buffer Size = %d\n", bufferSize);

	//cout<<"Media Type = "<<jmediaType<<endl;
	//cout<<"COlor Space Type = "<<jcolorSpace<<endl;
	//UINT8 *bufferStart = mappingBuffer + sizeof(INT32);

	ErrorTypes eT  = AddDecoder(mappingBuffer, jmediaType, jcolorSpace);

	if ( DSS_SUCCESS != eT )
	{
		//TO DO: Handle the error
		return (UINT32)DSS_ERROR;
	}

	return (UINT32)(eT);

}
/*
 * Class:     com_dss_vms_jni_interfaces_CodecMaster
 * Method:    _removeDecoder
 * Signature: (Ljava/nio/ByteBuffer;)I
 */
JNIEXPORT jint JNICALL Java_com_dss_vms_jni_interfaces_CodecMaster__1removeDecorder
(JNIEnv *env, jobject obj,jobject jmappingBuffer)
{

	UINT8 *mappingBuffer =  reinterpret_cast<UINT8 *>((env)->GetDirectBufferAddress(jmappingBuffer));

	INT32 bufferSize = *((INT32 *)mappingBuffer);
	ErrorTypes eT = RemoveDecoder(mappingBuffer);
}
/*
 * Class:     com_dss_vms_jni_interfaces_CodecMaster
 * Method:    _decode
 * Signature: (Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;Ljava/nio/IntBuffer;)I
 */
JNIEXPORT jint JNICALL Java_com_dss_vms_jni_interfaces_CodecMaster__1decode__Ljava_nio_ByteBuffer_2Ljava_nio_ByteBuffer_2Ljava_nio_IntBuffer_2
(JNIEnv *env, jobject obj, jobject jmappingBuffer, jobject jencodedBuffer, jobject jdecodedBuffer){

	UINT8 *mappingBuffer =  reinterpret_cast<UINT8 *>((env)->GetDirectBufferAddress(jmappingBuffer));

	//INT32 m_bufferSize = *((INT32 *)mappingBuffer);
	UINT8 *encodedBuffer =  reinterpret_cast<UINT8 *>((env)->GetDirectBufferAddress(jencodedBuffer));

	//INT32 m_bufferSize = *((INT32 *)encodedBuffer);
	UINT32 *decodedBuffer =  reinterpret_cast<UINT32 *>((env)->GetDirectBufferAddress(jdecodedBuffer));

	//INT32 m_bufferSize = *((INT32 *)encodedBuffer);

	ErrorTypes eT  = Decode(mappingBuffer, encodedBuffer, decodedBuffer);

//	if ( DSS_SUCCESS != eT )
//	{
//		//TO DO: Handle the error
//		return (UINT32)DSS_ERROR;
//	}

	return (UINT32)(eT);
}
/*
 * Class:     com_dss_vms_jni_interfaces_CodecMaster
 * Method:    _decode
 * Signature: (BBLjava/nio/ByteBuffer;Ljava/nio/IntBuffer;)I
 */
JNIEXPORT jint JNICALL Java_com_dss_vms_jni_interfaces_CodecMaster__1decode__BBLjava_nio_ByteBuffer_2Ljava_nio_IntBuffer_2
(JNIEnv *env, jobject obj, jbyte jmediaType, jbyte jcolorSpace, jobject jencodedBuffer, jobject jdecodedBuffer){


	//
	//	//const char mediaType =  reinterpret_cast<const char>((env)->GetDirectBufferAddress(jmediaType));
	//	//const char mediaType=(const char)(env)->GetStringUTFChars(jmediaType, 0);
	//
	//	jclass c = env->GetObjectClass(obj);
	//	jfieldID iId = env->GetByteField(obj, iId);//(c, "value", "B");
	//	env->SetByteField(obj, iId, jmediaType);
	//	//const char  mediaType = env->GetByteField(obj, iId);
	//
	//	jclass c1 = env->GetObjectClass(obj);
	//	jfieldID iId1 = env->GetFieldID(c1, "value", "B");
	//	env->SetByteField(obj, iId1, jcolorSpace);
	//	//const char  colorSpace = env->GetByteField(obj, iId1);
	//
	//	//const char colorSpace = reinterpret_cast<const char> jcolorSpace;
	//
	//	ErrorTypes eT  = Decode(iId, iId1, encodedBuffer, decodedBuffer);


}
/*
 * Class:     com_dss_vms_jni_interfaces_CodecMaster
 * Method:    _addEncoder
 * Signature: (Ljava/nio/ByteBuffer;BBIII)I
 */
JNIEXPORT jint JNICALL Java_com_dss_vms_jni_interfaces_CodecMaster__1addEncoder
(JNIEnv *env, jobject obj, jobject jmappingBuffer, jbyte jcodec, jbyte jcolorSpace, jint jwidth, jint jheight, jint jbitRate){
	//cout<<"DEcode in jni"<<endl;
}
/*
 * Class:     com_dss_vms_jni_interfaces_CodecMaster
 * Method:    _removeEncoder
 * Signature: (Ljava/nio/ByteBuffer;)I
 */
JNIEXPORT jint JNICALL Java_com_dss_vms_jni_interfaces_CodecMaster__1removeEncoder
(JNIEnv *env, jobject obj, jobject jmappingBuffer){

	UINT8 *mappingBuffer =  reinterpret_cast<UINT8 *>((env)->GetDirectBufferAddress(jmappingBuffer));

	ErrorTypes eT  = RemoveDecoder(mappingBuffer);

	if ( DSS_SUCCESS != eT )
	{
		//TO DO: Handle the error
		return (UINT32)DSS_ERROR;
	}
	return (UINT32)(eT);
}
