/* DO NOT EDIT THIS FILE - it is machine generated */
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
using namespace std;
#include "StreamMaster.h"
/* Header for class com_dss_vms_jni_interfaces_StreamMaster */
#include "com_dss_vms_jni_interfaces_StreamMaster.h"

/*
 * Class:     com_dss_vms_jni_interfaces_StreamMaster
 * Method:    _initialize
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_dss_vms_jni_interfaces_StreamMaster__1initialize
(JNIEnv *env, jobject jobject)
{
	ErrorTypes eT = DSS_SUCCESS;

	if ( DSS_SUCCESS != (eT = Initialize()) )
	{
		//TO DO: Handle the error
		return (UINT32)DSS_ERROR;
	}
	return (UINT32)(eT);
}

/*
 * Class:     com_dss_vms_jni_interfaces_StreamMaster
 * Method:    _tearDown
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_dss_vms_jni_interfaces_StreamMaster__1tearDown
(JNIEnv *env, jobject jobject)
{
	ErrorTypes eT = DSS_SUCCESS;

	if ( DSS_SUCCESS != (eT = TearDown()) )
	{
		//TO DO: Handle the error

		return (UINT32)DSS_ERROR;
	}

	return (UINT32)eT;
}

/*
 * Class:     com_dss_vms_jni_interfaces_StreamMaster
 * Method:    _addStream
 * Signature: (Ljava/nio/ByteBuffer;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_dss_vms_jni_interfaces_StreamMaster__1addStream
(JNIEnv *env, jobject obj, jobject jmappingBuffer, jstring jcameraModel, jstring jurl, jstring jusername, jstring jpassword, jint jcamId)
{
	UINT8 *mappingBuffer =  reinterpret_cast<UINT8 *>((env)->GetDirectBufferAddress(jmappingBuffer));
	INT32 bufferSize = *((INT32 *)mappingBuffer);

#if DEBUG_PRINT
	printf("Buffer Size = %d\n", bufferSize);
#endif

	if(NULL == env)
	{
		return DSS_ERROR;
	}
	else if(NULL == obj)
	{
		return DSS_ERROR;
	}
	else if(NULL == jcameraModel)
	{
		return DSS_ERROR;
	}
	else if(NULL == jurl)
	{
		return DSS_ERROR;
	}

	const char *cameraModel=(const char *)(env)->GetStringUTFChars(jcameraModel, NULL);
	printf("After Camera model\n");
	const char *url=(const char *)(env)->GetStringUTFChars(jurl, 0);
	printf("After Camera URL\n");
	const char *username=(const char *)(env)->GetStringUTFChars(jusername, 0);
	printf("After Camera USername\n");
	const char *password=(const char *)(env)->GetStringUTFChars(jpassword,0);

#if DEBUG_PRINT
	printf("Camera model:  %s\n",cameraModel);
	printf("Camera URL:  %s\n", url);
	printf("Camera UId:  %s\n", username);
	printf("Camera Pass:  %s\n", password);
#endif

	/*
	 * Call AddStream with all inputs
//	 */
	ErrorTypes eT = AddStream(mappingBuffer, cameraModel, url, username, password, jcamId);

	if ( DSS_SUCCESS != eT )
	{
		//TO DO: Handle the error
		return (UINT32)DSS_ERROR;
	}
	return (UINT32)(eT);
}

/*
 * Class:     com_dss_vms_jni_interfaces_StreamMaster
 * Method:    _removeStream
 * Signature: (Ljava/nio/ByteBuffer;)I
 */
JNIEXPORT jint JNICALL Java_com_dss_vms_jni_interfaces_StreamMaster__1removeStream
(JNIEnv *env, jobject obj,jobject jmappingBuffer)
{
	ErrorTypes eT = DSS_SUCCESS;

	UINT8 *mappingBuffer =  reinterpret_cast<UINT8 *>((env)->GetDirectBufferAddress(jmappingBuffer));
	INT32 bufferSize = *((INT32 *)mappingBuffer);

	eT = RemoveStream(mappingBuffer);

	return (UINT32)(eT);
}
/*
 * Class:     com_dss_vms_jni_interfaces_StreamMaster
 * Method:    _getContent
 * Signature: (Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)I
 */
JNIEXPORT jint JNICALL Java_com_dss_vms_jni_interfaces_StreamMaster__1getContent
(JNIEnv *env, jobject obj, jobject jmappingBuffer, jobject jdataBuffer)
{
	ErrorTypes eT = DSS_SUCCESS;
	UINT8 *mappingBuffer =  reinterpret_cast<UINT8 *>((env)->GetDirectBufferAddress(jmappingBuffer));
	INT32 mapBuffSize = *((INT32 *)mappingBuffer);

	UINT8 *dataBuffer =  reinterpret_cast<UINT8 *>((env)->GetDirectBufferAddress(jdataBuffer));
	INT32 dataBuffSize = *((INT32 *)dataBuffer);

	eT = GetContent(mappingBuffer, dataBuffer);

	/*	if ( DSS_SUCCESS != eT )
	{
		//TO DO: Handle the error
		return (UINT32)DSS_ERROR;
	}*/

	return (UINT32)(eT);
}
/*
 * Class:     com_dss_vms_jni_interfaces_StreamMaster
 * Method:    _pauseStream
 * Signature: (Ljava/nio/ByteBuffer;)I
 */
JNIEXPORT jint JNICALL Java_com_dss_vms_jni_interfaces_StreamMaster__1pauseStream
(JNIEnv *env, jobject obj, jobject jmappingBuffer)
{
	ErrorTypes eT = DSS_SUCCESS;
	UINT8 *mappingBuffer =  reinterpret_cast<UINT8 *>((env)->GetDirectBufferAddress(jmappingBuffer));

	INT32 bufferSize = *((INT32 *)mappingBuffer);

	return (UINT32)(eT);
}
/*
 * Class:     com_dss_vms_jni_interfaces_StreamMaster
 * Method:    _resumeStream
 * Signature: (Ljava/nio/ByteBuffer;)I
 */
JNIEXPORT jint JNICALL Java_com_dss_vms_jni_interfaces_StreamMaster__1resumeStream
(JNIEnv *env , jobject obj, jobject jmappingBuffer)
{
	ErrorTypes eT = DSS_SUCCESS;
	UINT8 *mappingBuffer =  reinterpret_cast<UINT8 *>((env)->GetDirectBufferAddress(jmappingBuffer));

	INT32 bufferSize = *((INT32 *)mappingBuffer);

	return (UINT32)(eT);
}
